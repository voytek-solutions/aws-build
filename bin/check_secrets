#!/usr/bin/env python

import argparse
import boto3
import logging
import os
import sys
import yaml

def check(cmd_args):
	secrets_filename = 'secrets.yml'
	secrets = {
		'key_name': None,
		'aws': {
			'build': { }
		}
	}
	ec2_client = boto3.client('ec2')

	if os.path.exists(secrets_filename):
		with open(secrets_filename, 'r') as secrets_file:
			try:
				secrets.update(yaml.load(secrets_file))
			except yaml.YAMLError as exc:
				logging.error(exc)

	if not secrets['key_name']:
		get_key_name(secrets, cmd_args.key_name)

	# AWS build VPC
	if 'vpc_id' not in secrets['aws']['build'] \
			or not secrets['aws']['build']['vpc_id']:
		get_vpc_id(secrets, ec2_client, cmd_args.build_environment)

	# AWS build subnet
	if 'subnet' not in secrets['aws']['build'] \
			or not secrets['aws']['build']['subnet']:
		get_subnet(secrets, ec2_client)

	# Save secrets.yml
	with open('secrets.yml', 'w+') as secretsFile:
		yaml.dump(secrets, secretsFile, explicit_start = True, indent=2,
			default_flow_style=False)

def get_key_name(secrets, default):
	response = default

	if not default:
		response = raw_input('Please enter your AWS EC2 key pair name: ')

	secrets['key_name'] = response

def get_vpc_id(secrets, ec2_client, build_environment):
	logging.info('Getting %s vpc details', build_environment)
	try:
		vpc_response = ec2_client.describe_vpcs(Filters = [ {
			'Name': 'tag:environment',
			'Values': [
				build_environment,
			]
		} ] )
	except botocore.exceptions.ClientError as error:
		logging.error('Boto error %s', error)
		sys.exit(1)

	if len(vpc_response['Vpcs']) == 0:
		logging.error('Could not find %s vpc, has it been created?',
			build_environment)
		sys.exit(1)

	vpc_id = vpc_response['Vpcs'][0]['VpcId']
	logging.info('Got VPC %s', vpc_id)
	secrets['aws']['build']['vpc_id'] = vpc_id

def get_subnet(secrets, ec2_client):
	vpc_id = secrets['aws']['build']['vpc_id']

	logging.info('Getting %s subnet details', vpc_id)
	try:
		subnet_response = ec2_client.describe_subnets(Filters = [ {
			'Name': 'vpc-id',
			'Values': [
				vpc_id,
			]
		} ] )
	except botocore.exceptions.ClientError as error:
		logging.error('Boto error %s', error)
		sys.exit(1)

	if len(subnet_response['Subnets']) == 0:
		logging.error('Could not find subnets for vpc %s, have they been created?',
			vpc_id)
		sys.exit(1)

	public_subnets = [
		subnet
		for subnet in subnet_response['Subnets']
		if subnet['MapPublicIpOnLaunch']
	]

	subnet_id = public_subnets[0]['SubnetId']
	logging.info('Got Subnet %s', subnet_id)
	secrets['aws']['build']['subnet'] = subnet_id

class CommandParser(argparse.ArgumentParser):
	def error(self, message):
		self.print_help()
		sys.stderr.write('error: %s\n' % message)
		sys.exit(2)

def command():
	logging.basicConfig(stream=sys.stdout, level=logging.INFO,
		format='%(levelname)s:%(message)s')

	parser = CommandParser(
		formatter_class=argparse.RawDescriptionHelpFormatter,
		epilog="""description:
Ensures that "secrets.yml" file contains all necessary information.
	"""
	)

	parser.add_argument(
		'-e', '--build-environment',
		dest='build_environment',
		help='environment to launch the build machine in, defaults to mgt',
		default='mgt'
	)

	parser.add_argument(
		'-k', '--key-name',
		dest='key_name',
		help='aws key_name. If not specified you will be asked to provide one',
		default=''
	)

	cmd_args = parser.parse_args()

	check(cmd_args)

if __name__ == '__main__':
	command()
